{
  "pages": [
    {
      "tags": "",
      "text": "Fiscal year\nGuam\nHawaii\n\n\n\n\n2014\n$180,000\n$2,448,000\n\n\n2015\n$179,844\n$2,200,000\n\n\n2016\n$250,000\n$1,399,384\n\n\n2017\n$475,000\n$1,225,000\n\n\nTotal\n$1,084,844\n$7,272,384\n\n\n\nClick on fiscal year for details.",
      "title": "USDA Farm Bill Funding for Coconut Rhinoceros Beetle Projects in Guam and Hawaii",
      "url": "https://example.com/posts/usda-farm-bill-funding-for-coconut-rhinoceros-beetle-projects-in-guam-and-hawaii/"
    },
    {
      "tags": "python scrapy",
      "text": "Last updated Sunday, 12. February 2017 07:53AM \nI wanted to find pages on the University of Guam College of Natural and Life Sciences Web Site containing a specific string. This short python script, which uses the scrapy framework, does the trick:\ntest_spider.py\nfrom scrapy.spiders import CrawlSpider, Rule\nfrom scrapy.contrib.linkextractors import LinkExtractor\n\nclass someSpider(CrawlSpider):\n  name = 'crawltest'\n  allowed_domains = ['cnas-re.uog.edu']\n  start_urls = ['http://cnas-re.uog.edu']\n  rules = ( Rule(LinkExtractor(allow=()), follow=True,callback='parse_item'), )\n\n  def parse_item(self, response):\n    target = 'bell pepper'\n    log = 'test_spider_log.md'\n    if target in str(response.body):\n      with open(log, 'a') as f:\n        f.write('**{} was found in <{}>\\n'.format(target, response.url))\n    return\n\n\n\nExecuted from the command line using:\nscrapy runspider test_spider.py -s DEPTH_LIMIT=2\n\n\n\nOutput: test_spider_log.md\nbell pepper was found in http://cnas-re.uog.edu/soils-of-guam/\nbell pepper was found in http://cnas-re.uog.edu/cnas-publications/?auth=&limit=17&tgid=&type=&usr=&yr=\nbell pepper was found in http://cnas-re.uog.edu/cnas-publications/?auth=&tgid=115&type=&usr=&yr=\nbell pepper was found in http://cnas-re.uog.edu/cnas-publications/?auth=&tgid=66&type=&usr=&yr=\n\nasas\nasasa",
      "title": "Using Scrapy to Find a String in a Web Site",
      "url": "https://example.com/posts/using-scrapy-to-find-a-string-in-a-web-site/"
    },
    {
      "tags": "github pages,Nikola",
      "text": "Publishing my Nikola site on github pages was remarkably easy.\n\n\nInstructions are found in the Nikola Handbook here: https://getnikola.com/handbook.html#deploying-to-github\n\n\nCreated a new repo on github called aubreymoore/blog\n\nIMPORTANT: Go to the settings page for the new repo and enable github pages. The root URL for these pages will be at https://aubreymoore.github.io/blog/\n\n\n\nCreated a git repo on my local machine:\n\n\ngit init .\ngit remote add origin git@github.com:aubreymoore/blog.git\n\n\n\n\nPushed my site to github from the command line:\n\nnikola github_deploy",
      "title": "Publish Nikola Site on GitHub",
      "url": "https://example.com/posts/publish-nikola-site-on-github/"
    },
    {
      "tags": "DreamHost,PythonAnywhere,web2py",
      "text": "Failed Attempt to Run wep2py on Dreamhost\nSaturday, 11. February 2017 06:37AM \n\nSSH to DreamHost shared hosting.\nRun python. Version is 2.7.3\nvirtualenv is available\n\nCreate virtualenv\n\nReference http://docs.python-guide.org/en/latest/dev/virtualenvs/\n\nmkdir my_project_folder\ncd my_project_folder\nvirtualenv venv\nsource venv/bin/activate\npip install requests\ndeactivate\n\n\n\nDownload web2py\nwget https://mdipierro.pythonanywhere.com/examples/static/web2py_src.zip\nunzip web2py_src.zip\nrm web2py_src.zip\n\n\n\nFirst Attempt\n(venv)aubreymoore@cactus:~/my_project_folder $ cd web2py\n(venv)aubreymoore@cactus:~/my_project_folder/web2py $ ls\nCHANGELOG  LICENSE  MANIFEST.in  NEWINSTALL  README.markdown  VERSION  anyserver.py  applications  examples  extras  gluon  handlers  scripts  site-packages  web2py.py\n(venv)aubreymoore@cactus:~/my_project_folder/web2py $ python web2py.py\nweb2py Web Framework\nCreated by Massimo Di Pierro, Copyright 2007-2017\nVersion 2.14.6-stable+timestamp.2016.05.10.00.21.47\nDatabase drivers available: sqlite3, imaplib, pyodbc, pymysql, pg8000\nWARNING:web2py:GUI not available because Tk library is not installed\nchoose a password:\n\nplease visit:\n    http://127.0.0.1:8000/\nuse \"kill -SIGTERM 28797\" to shutdown the web2py server\n\n\n\n\nwep2py seems to run properly, but the local server it sets up is inaccessable\n\nHelpful Sites\n\nhttps://groups.google.com/forum/#!topic/web2py/nixNhDrxHtQ\n\nSeems Overly Complicated - Give Up and Deploy to pythonanywhere\n\nto clean up, we simply delete my_project_folder\n\ncd ~\nrm -rf my_project_folder",
      "title": "Failed Attempt to Run wep2py on Dreamhost",
      "url": "https://example.com/posts/failed-attempt-to-run-wep2py-on-dreamhost/"
    },
    {
      "tags": "Nikola",
      "text": "Here it is.\nNeed to go to work now.",
      "title": "Nikola Site is on GitHub",
      "url": "https://example.com/posts/nikola-site-is-on-github/"
    },
    {
      "tags": "",
      "text": "Recording Synonyms\n\n\nAccording to GBIF GNA Profile Reference Guide for Darwin Core Archive, Core Terms and Extensions: \"Synonyms occupy separate lines and therefore also have unique taxonIDs.\"\n\n\nIn Publishing Species Checklists, Step-by-Step Guide, there is a good example of how to handle synonyms on page 18.  This is a very good, detailed reference.\n\n\nSeveral references indicate that misspellings should be noted in dwc:taxonRemarks. Example: \"this name is a misspelling in common use\"",
      "title": "Taxonomic Notes",
      "url": "https://example.com/posts/taxonomic-notes/"
    },
    {
      "tags": "Nikola",
      "text": "This post was helpful in learning how to configure Nikola.\nHere's a post that shows how to add full text search to a Nikola site.",
      "title": "Configuring Nikola and Adding Full Text Search",
      "url": "https://example.com/posts/test-post/"
    },
    {
      "tags": "",
      "text": "Nikola supports special links with the syntax link://kind/name. In the templates you can also\nuse _link(kind, name) Here is the description for all the supported kinds.\n\narchive\nLink to archive path, name is the year.\nExample:\nlink://archive/2013 => /archives/2013/index.html\n\narchive_atom\nLink to atom archive path, name is the year.\nExample:\nlink://archive_atom/2013 => /archives/2013/index.atom\n\nauthor\nLink to an author's page.\nExample:\nlink://author/joe => /authors/joe.html\n\nauthor_atom\nLink to an author's Atom feed.\nExample:\nlink://author_atom/joe => /authors/joe.atom\n\nauthor_index\nLink to the author's index.\nExample:\nlink://authors/ => /authors/index.html\n\nauthor_rss\nLink to an author's RSS feed.\nExample:\nlink://author_rss/joe => /authors/joe.rss\n\ncategory\nA link to a category.\nExample:\nlink://category/dogs => /categories/dogs.html\n\ncategory_atom\nA link to a category's Atom feed.\nExample:\nlink://category_atom/dogs => /categories/dogs.atom\n\ncategory_index\nA link to the category index.\nExample:\nlink://category_index => /categories/index.html\n\ncategory_rss\nA link to a category's RSS feed.\nExample:\nlink://category_rss/dogs => /categories/dogs.xml\n\nfilename\nLink to post or page by source filename.\nExample:\nlink://filename/manual.txt => /docs/handbook.html\n\ngallery\nLink to an image gallery's path.\nIt will try to find a gallery with that name if it's not ambiguous\nor with that path. For example:\nlink://gallery/london => /galleries/trips/london/index.html\nlink://gallery/trips/london => /galleries/trips/london/index.html\n\ngallery_global\nLink to the global gallery path, which contains all the images in galleries.\nThere is only one copy of an image on multilingual blogs, in the site root.\nlink://gallery_global/london => /galleries/trips/london/index.html\nlink://gallery_global/trips/london => /galleries/trips/london/index.html\n(a gallery link could lead to eg. /en/galleries/trips/london/index.html)\n\ngallery_rss\nLink to an image gallery's RSS feed.\nIt will try to find a gallery with that name if it's not ambiguous\nor with that path. For example:\nlink://gallery_rss/london => /galleries/trips/london/rss.xml\nlink://gallery_rss/trips/london => /galleries/trips/london/rss.xml\n\nindex\nLink to a numbered index.\nExample:\nlink://index/3 => /index-3.html\n\nindex_atom\nLink to a numbered Atom index.\nExample:\nlink://index_atom/3 => /index-3.atom\n\nlisting\nA link to a listing.\nIt will try to use the file name if it's not ambiguous, or the file path.\nExample:\nlink://listing/hello.py => /listings/tutorial/hello.py.html\nlink://listing/tutorial/hello.py => /listings/tutorial/hello.py.html\n\nlisting_source\nA link to the source code for a listing.\nIt will try to use the file name if it's not ambiguous, or the file path.\nExample:\nlink://listing_source/hello.py => /listings/tutorial/hello.py\nlink://listing_source/tutorial/hello.py => /listings/tutorial/hello.py\n\npost_path\nLink to the destination of an element in the POSTS/PAGES settings.\nExample:\nlink://post_path/posts => /blog\n\nroot\nLink to the current language's root.\nExample:\nlink://root_path => /\nlink://root_path => /translations/spanish/\n\nrss\nA link to the RSS feed path.\nExample:\nlink://rss => /blog/rss.xml\n\nsection_index\nLink to the index for a section.\nExample:\nlink://section_index/cars => /cars/index.html\n\nsection_index_atom\nLink to the Atom index for a section.\nExample:\nlink://section_index_atom/cars => /cars/index.atom\n\nsection_index_rss\nLink to the RSS feed for a section.\nExample:\nlink://section_index_rss/cars => /cars/rss.xml\n\nslug\nA link to a post with given slug, if not ambiguous.\nExample:\nlink://slug/yellow-camaro => /posts/cars/awful/yellow-camaro/index.html\n\ntag\nA link to a tag's page.\nExample:\nlink://tag/cats => /tags/cats.html\n\ntag_atom\nA link to a tag's Atom feed.\nExample:\nlink://tag_atom/cats => /tags/cats.atom\n\ntag_index\nA link to the tag index.\nExample:\nlink://tag_index => /tags/index.html\n\ntag_rss\nA link to a tag's RSS feed.\nExample:\nlink://tag_rss/cats => /tags/cats.xml",
      "title": "Path Handlers for Nikola",
      "url": "https://example.com/pages/path-handlers/"
    },
    {
      "tags": "",
      "text": "If you are using reStructuredText and install pygal, Nikola has support for rather nice charts\nwith little effort, and i's even semi-interactive (hover your pointer over the legend!):\n.. chart:: StackedLine\n   :title: 'Browser usage evolution (in %)'\n   :fill: True\n   :x_labels: ['2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012']\n   :width: 600\n   :height: 400\n   :explicit_size: True\n   :style: BlueStyle\n\n   ('Others',  [14.2, 15.4, 15.3,  8.9,    9, 10.4,  8.9,  5.8,  6.7,  6.8,  7.5])\n   ('IE',      [85.8, 84.6, 84.7, 74.5,   66, 58.6, 54.7, 44.8, 36.2, 26.6, 20.1])\n   ('Firefox', [None, None, None, 16.6,   25,   31, 36.4, 45.5, 46.3, 42.8, 37.1])\n   ('Chrome',  [None, None, None, None, None, None,    0,  3.9, 10.8, 23.8, 35.3])\nIn order to use the Chart directive, you must install the \"pygal\" Python package.Here's how it works:\n\nNext to the directive, use the chart type you want\nAny option you can set in a chart? Use it like :title: in this example. Syntax on\nthe value is just like in the pygal examples.\nFor each data series do it like the line that says Firefox in this example. The first element\nis the label, then comes the data.\n\nEasy, right? Please explore the pygal site for more information, and just\ntake this example and tweak stuff.",
      "title": "Charts",
      "url": "https://example.com/pages/charts/"
    },
    {
      "tags": "",
      "text": "Version:\n7.8.1\n\n\n\nContents\n\nThe Default\nShareNice\nSocialSharePrivacy\nThe Hard Way\nThe Easy Way\n\n\n\n\n\nThe Default\nBy Default, the themes provided with Nikola will add to your pages a \"slide in\" widget at\nthe bottom right of the page, provided by Addthis. This is the HTML code for that:\n<!-- Social buttons -->\n<div id=\"addthisbox\" class=\"addthis_toolbox addthis_peekaboo_style\n    addthis_default_style addthis_label_style addthis_32x32_style\">\n<a class=\"addthis_button_more\">Share</a>\n<ul><li><a class=\"addthis_button_facebook\"></a>\n<li><a class=\"addthis_button_google_plusone_share\"></a>\n<li><a class=\"addthis_button_linkedin\"></a>\n<li><a class=\"addthis_button_twitter\"></a>\n</ul>\n</div>\n<script src=\"//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4f7088a56bb93798\"></script>\n<!-- End of social buttons -->\n\"\"\"\nYou can change that using the SOCIAL_BUTTONS_CODE option in your conf.py. In some cases, just\ndoing that will be enough but in others, it won't. This document tries to describe all the bits\ninvolved in making this work correctly.\n\nPart 1: SOCIAL_BUTTONS_CODE\nSocial sharing services like addthis and others will provide you a HTML snippet.\nIf it is self-contained, then just setting SOCIAL_BUTTONS_CODE may be enough.\nTry :-)\nPart 2: The theme\nThe SOCIAL_BUTTONS_CODE HTML fragment will be embedded somewhere by the theme. Whether that\nis the correct place or not is not something the theme author can truly know, so it is possible that\nyou may have to tweak the base.html template to make it look good.\nPart 3: BODY_END and EXTRA_HEAD_DATA\nSome social sharing code requires JS execution that depends on JQuery being available\n(example: SocialSharePrivacy). It's good\npractice (and often, the only way that will work) to put those at the end of <BODY>,\nand one easy way to do that is to put them in BODY_END\nOn the other hand, it's possible that it requires you to load some CSS files.\nThe right place for that is in the document's <HEAD> so they should be added\nin EXTRA_HEAD_DATA\n\nPart 4: assets\nFor sharing code that doesn't rely on a social sharing service, you may need to add CSS, Image, or JS\nfiles to your site\n\n\n\nShareNice\nSharenice is \"written in order to provide social sharing features to\nweb developers and website administrators who wish to maintain and protect their users' privacy\"\nwhich sounds cool to me.\nLet's go step by step into integrating the hosted version of ShareNice into a Nikola site.\nFor testing purposes, let's do it on a demo site:\n\n$ nikola init --demo sharenice_test\nA new site with example data has been created at sharenice_test.\nSee README.txt in that folder for more information.\n$ cd sharenice_test/\n\nTo see what's going on, let's start Nikola in \"auto mode\". This should build the\nsite and open a web browser showing the default configuration, with the AddThis widget:\n\n$ nikola auto -b\n\nFirst, let's add the HTML snippet that will show the sharing options. In your conf.py, set this, which\nis the HTML code suggested by ShareNice:\nSOCIAL_BUTTONS_CODE = \"\"\"<div id=\"shareNice\" data-share-label=\"Share\"\n    data-color-scheme=\"black\" data-icon-size=\"32\" data-panel-bottom=\"plain\"\n    data-services=\"plus.google.com,facebook.com,digg.com,email,delicious.com,twitter.com\"\n    style=\"float:right\"></div>\"\"\"\n\nBODY_END = \"\"\"<script src=\"http://graingert.co.uk/shareNice/code.js\"></script>\"\"\"\nAnd you should now see a sharing box at the bottom right of the page.\nMain problem remaining is that it doesn't really look good and integrated in the page layout.\nI suggest changing the code to this which looks nicer, but still has some placement issues:\nSOCIAL_BUTTONS_CODE = \"\"\"<div id=\"shareNice\" data-share-label=\"Share\"\n    data-color-scheme=\"black\" data-icon-size=\"32\" data-panel-bottom=\"plain\"\n    data-services=\"plus.google.com,facebook.com,email,twitter.com\"\n    style=\"position: absolute; left: 20px; top: 60px;\"></div>\"\"\"\nIf anyone comes up with a better idea of styling/placement, just let me know ;-)\nOne bad bit of this so far is that you are now using a script from another site, and that\ndoesn't let Nikola perform as many optimizations to your page as it could.\nSo, if you really want to go the extra mile to save a few KB and round trips, you could\ninstall your own copy from the github repo and\nuse that instead of the copy at sharenice.org.\nThen, you can create your own theme inheriting from the one you are using and add the CSS\nand JS files from ShareNice into your bundles configuration so they are combined and\nminified.\n\n\nSocialSharePrivacy\n\nThe Hard Way\nSocialSharePrivacy is \"a jQuery plugin that\nlets you add social share buttons to your website that don't allow the social sites to track\nyour users.\" Nice!\nLet's go step-by-step into integrating SocialSharePrivacy into a Nikola site. To improve\nprivacy, they recommend you not use the hosted service so we'll do it the hard way, by\ngetting and distributing everything in our own site.\nhttps://github.com/panzi/SocialSharePrivacy\nFor testing purposes, let's do it on a demo site:\n\n$ nikola init --demo ssp_test\nA new site with example data has been created at ssp_test.\nSee README.txt in that folder for more information.\n$ cd ssp_test/\n\nTo see what's going on, let's start Nikola in \"auto mode\". This should build the\nsite and open a web browser showing the default configuration, with the AddThis widget:\n\n$ nikola auto -b\n\nNow, download the current version\nand unzip it. You will have a SocialSharePrivacy-master folder with lots of stuff in it.\nFirst, we need to build it (this requires a working and modern uglifyjs, this may not be easy):\n\n$ cd SocialSharePrivacy-master\n$ sh build.sh -m gplus,twitter,facebook,mail -s \"/assets/css/socialshareprivacy.css\" -a off\n\nYou will now have several files in a build folder. We need to bring them into the site:\n\n$ cp -Rv SocialSharePrivacy-master/build/* files/\n$ cp -R SocialSharePrivacy-master/images/ files/assets/\n\nEdit your conf.py:\nBODY_END = \"\"\"\n<script src=\"/javascripts/jquery.socialshareprivacy.min.js\"></script>\n<script>\n$(document).ready(function () {\n    $('.share').socialSharePrivacy();\n});\n</script>\n\"\"\"\n\nSOCIAL_BUTTONS_CODE = \"\"\"<div class=\"share\"></div>\"\"\"\nIn my experience this produces a broken, duplicate, semi-working thing. YMMV and if you make it work correctly, let me know how :-)\n\n\nThe Easy Way\nGo to http://panzi.github.io/SocialSharePrivacy/ and use the provided form to get the code. Make sure you check \"I already use JQuery\"\nif you are using one of the themes that require it, like site or default, select the services you want, and use your disqus name if\nyou have one.\nIt will give you 3 code snippets:\n\n\"Insert this once in the head of your page\"\nPut it in BODY_END\n\"Insert this wherever you want a share widget displayed\"\nPut it in SOCIAL_BUTTONS_CODE\n\"Insert this once anywhere after the other code\"\nPut it in BODY_END\n\nThat should give you a working integration (not tested)",
      "title": "Alternative Social Buttons",
      "url": "https://example.com/pages/social_buttons/"
    },
    {
      "tags": "",
      "text": "Nikola Internals\nWhen trying to guide someone into adding a feature in Nikola, it hit me that\nwhile the way it's structured makes sense to me it is far from obvious.\nSo, this is a short document explaining what each piece of Nikola does and\nhow it all fits together.\n\nNikola is a Pile of Plugins\nMost of Nikola is implemented as plugins using Yapsy.\nYou can ignore that they are plugins and just think of them as regular python\nmodules and packages with a funny little .plugin file next to them.\nSo, 90% of the time, what you want to do is either write a new plugin or extend\nan existing one.\nThere are several kinds of plugins, all implementing interfaces defined in\nnikola/plugin_categories.py and documented in\nExtending Nikola\nIf your plugin has a dependency, please make sure it doesn't make Nikola\nthrow an exception when the dependency is missing. Try to fail gracefully\nwith an informative message.\n\nCommands are plugins\nWhen you use nikola foo you are using the plugin command/foo. Those are\nused to extend Nikola's command line. Their interface is defined in the Command\nclass. They take options and arguments and do whatever you want, so go wild.\nThe build command is special\nThe build command triggers a whole lot of things, and is the core of Nikola\nbecause it's the one that you use to build sites. So it deserves its own section.\n\n\nThe Build Command\nNikola's goal is similar, deep at heart, to a Makefile. Take sources, compile them\ninto something, in this case a website. Instead of a Makefile, Nikola uses\ndoit\nDoit has the concept of \"tasks\". The 1 minute summary of tasks is that they have:\n\nactions\nWhat the task does. For example, convert a markdown document into HTML.\ndependencies\nIf this file changes, then we need to redo the actions. If this configuration\noption changes, redo it, etc.\ntargets\nFiles that the action generates. No two actions can have the same targets.\nbasename:name\nEach task is identified by either a name or a basename:name pair.\n\n\nMore about tasks\nIf you ever want to do your own tasks, you really should read the doit\ndocumentation on tasks\n\nSo, what Nikola does, when you use the build command, is to read the\nconfiguration conf.py from the current folder, instantiate\nthe Nikola class, and have it generate a whole list of tasks for doit\nto process. Then doit will decide which tasks need doing, and do them, in\nthe right order.\nThe place where the tasks are generated is in Nikola.gen_tasks, which collects tasks\nfrom all the plugins inheriting BaseTask, massages them a bit, then passes them\nto doit.\nSo, if you want things to happen on build you want to create a Task plugin, or extend\none of the existing ones.\n\nTests\nWhile Nikola is not a hardcore TDD project, we like tests. So, please add them if you can.\nYou can do doctests, you can do unit tests, you can do integration tests. There is support\nfor all of them.\n\n\n\nPosts and Pages\nNikola has a concept of posts and pages. Both are more or less the same thing, except\nposts are added into RSS feeds and pages are not. All of them are in a list called\n\"the timeline\" formed by objects of class Post.\nWhen you are creating a task that needs the list of posts and/or pages (for example,\nthe RSS creation plugin) on task execution time, your plugin should call self.site.scan_posts()\nin gen_tasks to ensure the timeline is created and available in\nself.site.timeline. You should not modify the timeline, because it will cause consistency issues.\n\nscan_posts\nThe Nikola.scan_posts function can be used in plugins to force the\ntimeline creation, for example, while creating the tasks.\n\nYour plugin can use the timeline to generate \"stuff\" (technical term). For example,\nNikola comes with plugins that use the timeline to create a website (surprised?).\nThe workflow included with nikola is as follows (incomplete!):\n\nThe post is assigned a compiler based on its extension and the COMPILERS option.\nThe compiler is applied to the post data and a \"HTML fragment\" is produced. That\nfragment is stored in a cache (the posts plugin).\nThe configured theme has templates (and a template engine), which are applied to the post's\nHTML fragment and metadata (the pages plugin).\nThe original sources for the post are copied to some accessible place (the sources plugin).\nIf the post is tagged, some pages and RSS feeds for each tag are updated (the tags plugin).\nIf the post is new, it's included in the blog's RSS feed (the rss plugin).\nThe post is added in the right place in the index pages for the blog (the indexes plugin).\nCSS/JS/Images for the theme are put in the right places (the copy_assets and bundles plugins).\nA File describing the whole site is created (the sitemap plugin).\n\nYou can add whatever you want to that list: just create a plugin for it.\nYou can also expand Nikola's capabilities at several points:\n\ncompilers\nNikola supports a variety of markups. If you want to add another one, you need to create\na Compiler plugin.\ntemplates\nNikola's themes can use Jinja2 or Mako templates. If you prefer another template system,\nyou have to create a TemplateSystem plugin.\nthemes\nTo change how the generated site looks, you can create custom themes.\n\nAnd of course, you can also replace or extend each of the existing plugins.\n\n\n\nNikola Architecture",
      "title": "Nikola Internals",
      "url": "https://example.com/pages/internals/"
    },
    {
      "tags": "",
      "text": "Extending Nikola\n\n\n\n\nVersion:7.8.1\n\nAuthor:Roberto Alsina <ralsina@netmanagers.com.ar>\n\n\n\n\nContents\n\nExtending Nikola\nCommand Plugins\nTemplateSystem Plugins\nTask Plugins\nPageCompiler Plugins\nRestExtension Plugins\nMarkdownExtension Plugins\nSignalHandler Plugins\nConfigPlugin Plugins\nPostScanner Plugins\n\n\nPlugin Index\nPath/Link Resolution Mechanism\nTemplate Hooks\nShortcodes\nTemplate-based Shortcodes\n\n\nState and Cache\n\n\nNikola is extensible. Almost all its functionality is based on plugins,\nand you can add your own or replace the provided ones.\nPlugins consist of a metadata file (with .plugin extension) and\na Python module (a .py file) or package (a folder containing\na __init__.py file.\nTo use a plugin in your site, you just have to put it in a plugins\nfolder in your site.\nPlugins come in various flavours, aimed at extending different aspects\nof Nikola.\n\nCommand Plugins\nWhen you run nikola --help you will see something like this:\n$ nikola help\nNikola is a tool to create static websites and blogs. For full documentation and more\ninformation, please visit https://getnikola.com/\n\n\nAvailable commands:\nnikola auto                 automatically detect site changes, rebuild\n                            and optionally refresh a browser\nnikola bootswatch_theme     given a swatch name from bootswatch.com and a\n                            parent theme, creates a custom theme\nnikola build                run tasks\nnikola check                check links and files in the generated site\nnikola clean                clean action / remove targets\nnikola console              start an interactive python console with access to\n                            your site and configuration\nnikola deploy               deploy the site\nnikola dumpdb               dump dependency DB\nnikola forget               clear successful run status from internal DB\nnikola help                 show help\nnikola ignore               ignore task (skip) on subsequent runs\nnikola import_blogger       import a blogger dump\nnikola import_feed          import a RSS/Atom dump\nnikola import_wordpress     import a WordPress dump\nnikola init                 create a Nikola site in the specified folder\nnikola list                 list tasks from dodo file\nnikola mincss               apply mincss to the generated site\nnikola new_post             create a new blog post or site page\nnikola run                  run tasks\nnikola serve                start the test webserver\nnikola strace               use strace to list file_deps and targets\nnikola theme                manage themes\nnikola version              print the Nikola version number\n\nnikola help                 show help / reference\nnikola help <command>       show command usage\nnikola help <task-name>     show task usage\nThat will give you a list of all available commands in your version of Nikola.\nEach and every one of those is a plugin. Let's look at a typical example:\nFirst, the serve.plugin file:\n[Core]\nName = serve\nModule = serve\n\n[Documentation]\nAuthor = Roberto Alsina\nVersion = 0.1\nWebsite = https://getnikola.com\nDescription = Start test server.\n\nNote\nIf you want to publish your plugin on the Plugin Index, read\nthe docs for the Index\n(and the .plugin file examples and explanations).\n\nFor your own plugin, just change the values in a sensible way. The\nModule will be used to find the matching Python module, in this case\nserve.py, from which this is the interesting bit:\nfrom nikola.plugin_categories import Command\n\n# You have to inherit Command for this to be a\n# command plugin:\n\nclass CommandServe(Command):\n    \"\"\"Start test server.\"\"\"\n\n    name = \"serve\"\n    doc_usage = \"[options]\"\n    doc_purpose = \"start the test webserver\"\n\n    cmd_options = (\n        {\n            'name': 'port',\n            'short': 'p',\n            'long': 'port',\n            'default': 8000,\n            'type': int,\n            'help': 'Port number (default: 8000)',\n        },\n        {\n            'name': 'address',\n            'short': 'a',\n            'long': '--address',\n            'type': str,\n            'default': '127.0.0.1',\n            'help': 'Address to bind (default: 127.0.0.1)',\n        },\n    )\n\n    def _execute(self, options, args):\n        \"\"\"Start test server.\"\"\"\n        out_dir = self.site.config['OUTPUT_FOLDER']\n        if not os.path.isdir(out_dir):\n            print(\"Error: Missing '{0}' folder?\".format(out_dir))\n        else:\n            os.chdir(out_dir)\n            httpd = HTTPServer((options['address'], options['port']),\n                            OurHTTPRequestHandler)\n            sa = httpd.socket.getsockname()\n            print(\"Serving HTTP on\", sa[0], \"port\", sa[1], \"...\")\n            httpd.serve_forever()\nAs mentioned above, a plugin can have options, which the user can see by doing\nnikola help command and can later use, for example:\n$ nikola help serve\nPurpose: start the test webserver\nUsage:   nikola serve [options]\n\nOptions:\n-p ARG, --port=ARG        Port number (default: 8000)\n-a ARG, ----address=ARG   Address to bind (default: 127.0.0.1)\n\n$ nikola serve -p 9000\nServing HTTP on 127.0.0.1 port 9000 ...\nSo, what can you do with commands? Well, anything you want, really. I have implemented\na sort of planet using it. So, be creative, and if you do something interesting,\nlet me know ;-)\n\n\nTemplateSystem Plugins\nNikola supports Mako and Jinja2. If you prefer some other templating\nsystem, then you will have to write a TemplateSystem plugin. Here's how they work.\nFirst, you have to create a .plugin file. Here's the one for the Mako plugin:\n[Core]\nName = mako\nModule = mako\n\n[Documentation]\nAuthor = Roberto Alsina\nVersion = 0.1\nWebsite = https://getnikola.com\nDescription = Support for Mako templates.\n\nNote\nIf you want to publish your plugin on the Plugin Index, read\nthe docs for the Index\n(and the .plugin file examples and explanations).\n\nYou will have to replace \"mako\" with your template system's name, and other data\nin the obvious ways.\nThe \"Module\" option is the name of the module, which has to look something like this,\na stub for a hypothetical system called \"Templater\":\nfrom nikola.plugin_categories import TemplateSystem\n\n# You have to inherit TemplateSystem\n\nclass TemplaterTemplates(TemplateSystem):\n    \"\"\"Wrapper for Templater templates.\"\"\"\n\n    # name has to match Name in the .plugin file\n    name = \"templater\"\n\n    # A list of directories where the templates will be\n    # located. Most template systems have some sort of\n    # template loading tool that can use this.\n    def set_directories(self, directories, cache_folder):\n        \"\"\"Sets the list of folders where templates are located and cache.\"\"\"\n        pass\n\n    # You *must* implement this, even if to return []\n    # It should return a list of all the files that,\n    # when changed, may affect the template's output.\n    # usually this involves template inheritance and\n    # inclusion.\n    def template_deps(self, template_name):\n        \"\"\"Returns filenames which are dependencies for a template.\"\"\"\n        return []\n\n    def render_template(self, template_name, output_name, context):\n        \"\"\"Renders template to a file using context.\n\n        This must save the data to output_name *and* return it\n        so that the caller may do additional processing.\n        \"\"\"\n        pass\n\n    # The method that does the actual rendering.\n    # template_name is the name of the template file,\n    # context is a dictionary containing the data the template\n    # uses for rendering.\n    def render_template_to_string(self, template, context):\n        \"\"\"Renders template to a string using context. \"\"\"\n        pass\n\n    def inject_directory(self, directory):\n        \"\"\"Injects the directory with the lowest priority in the\n        template search mechanism.\"\"\"\n        pass\nYou can see a real example in the Jinja plugin\n\n\nTask Plugins\nIf you want to do something that depends on the data in your site, you\nprobably want to do a Task plugin, which will make it be part of the\nnikola build command. These are the currently available tasks, all\nprovided by plugins:\n\nOther Tasks\nThere are also LateTask plugins, which are executed later,\nand TaskMultiplier plugins that take a task and create\nmore tasks out of it.\n\n$ nikola list\nScanning posts....done!\nbuild_bundles\nbuild_less\ncopy_assets\ncopy_files\npost_render\nredirect\nrender_archive\nrender_galleries\nrender_galleries_clean\nrender_indexes\nrender_listings\nrender_pages\nrender_posts\nrender_rss\nrender_site\nrender_sources\nrender_tags\nsitemap\nThese have access to the site object which contains your timeline and\nyour configuration.\nThe critical bit of Task plugins is their gen_tasks method, which yields\ndoit tasks.\nThe details of how to handle dependencies, etc., are a bit too much for this\ndocument, so I'll just leave you with an example, the copy_assets task.\nFirst the task_copy_assets.plugin file, which you should copy and edit\nin the logical ways:\n[Core]\nName = copy_assets\nModule = task_copy_assets\n\n[Documentation]\nAuthor = Roberto Alsina\nVersion = 0.1\nWebsite = https://getnikola.com\nDescription = Copy theme assets into output.\n\nNote\nIf you want to publish your plugin on the Plugin Index, read\nthe docs for the Index\n(and the .plugin file examples and explanations).\n\nAnd the task_copy_assets.py file, in its entirety:\nimport os\n\nfrom nikola.plugin_categories import Task\nfrom nikola import utils\n\n# Have to inherit Task to be a task plugin\nclass CopyAssets(Task):\n    \"\"\"Copy theme assets into output.\"\"\"\n\n    name = \"copy_assets\"\n\n    # This yields the tasks\n    def gen_tasks(self):\n        \"\"\"Create tasks to copy the assets of the whole theme chain.\n\n        If a file is present on two themes, use the version\n        from the \"youngest\" theme.\n        \"\"\"\n\n        # I put all the configurations and data the plugin uses\n        # in a dictionary because utils.config_changed will\n        # make it so that if these change, this task will be\n        # marked out of date, and run again.\n\n        kw = {\n            \"themes\": self.site.THEMES,\n            \"output_folder\": self.site.config['OUTPUT_FOLDER'],\n            \"filters\": self.site.config['FILTERS'],\n        }\n\n        tasks = {}\n        for theme_name in kw['themes']:\n            src = os.path.join(utils.get_theme_path(theme_name), 'assets')\n            dst = os.path.join(kw['output_folder'], 'assets')\n            for task in utils.copy_tree(src, dst):\n                if task['name'] in tasks:\n                    continue\n                tasks[task['name']] = task\n                task['uptodate'] = task.get('uptodate', []) + \\\n                    [utils.config_changed(kw)]\n                task['basename'] = self.name\n                # If your task generates files, please do this.\n                yield utils.apply_filters(task, kw['filters'])\n\n\nPageCompiler Plugins\nThese plugins implement markup languages, they take sources for posts or pages and\ncreate HTML or other output files. A good example is the misaka plugin.\nThey must provide:\n\ncompile_html\nFunction that builds a file.\ncreate_post\nFunction that creates an empty file with some metadata in it.\n\nIf the compiler produces something other than HTML files, it should also implement extension which\nreturns the preferred extension for the output file.\nThese plugins can also be used to extract metadata from a file. To do so, the\nplugin may implement read_metadata that will return a dict containing the\nmetadata contained in the file.\n\n\nRestExtension Plugins\nImplement directives for reStructuredText, see media.py for a simple example.\nIf your output depends on a config value, you need to make your post record a\ndependency on a pseudo-path, like this:\n####MAGIC####CONFIG:OPTIONNAME\nThen, whenever the OPTIONNAME option is changed in conf.py, the file will be rebuilt.\nIf your directive depends or may depend on the whole timeline (like the\npost-list directive, where adding new posts to the site could make it\nstale), you should record a dependency on the pseudo-path\n####MAGIC####TIMELINE.\n\n\nMarkdownExtension Plugins\nImplement Markdown extensions, see mdx_nikola.py for a simple example.\nNote that Python markdown extensions are often also available as separate\npackages. This is only meant to ship extensions along with Nikola.\n\n\nSignalHandler Plugins\nThese plugins extend the SignalHandler class and connect to one or more\nsignals via blinker.\nThe easiest way to do this is to reimplement set_site() and just connect to\nwhatever signals you want there.\nCurrently Nikola emits the following signals:\n\nsighandlers_loaded\nRight after SignalHandler plugin activation.\ninitialized\nWhen all tasks are loaded.\nconfigured\nWhen all the configuration file is processed. Note that plugins are activated before this is emitted.\nscanned\nAfter posts are scanned.\nnew_post / new_page\nWhen a new post is created, using the nikola new_post/nikola new_page commands.  The signal\ndata contains the path of the file, and the metadata file (if there is one).\nexisting_post / existing_page\nWhen a new post fails to be created due to a title conflict. Contains the same data as new_post.\ndeployed\nWhen the nikola deploy command is run, and there is at least one new\nentry/post since last_deploy.  The signal data is of the form:\n\n{\n 'last_deploy: # datetime object for the last deployed time,\n 'new_deploy': # datetime object for the current deployed time,\n 'clean': # whether there was a record of a last deployment,\n 'deployed': # all files deployed after the last deploy,\n 'undeployed': # all files not deployed since they are either future posts/drafts\n}\n\n\ncompiled\nWhen a post/page is compiled from its source to html, before anything else is done with it.  The signal\ndata is in the form:\n\n{\n 'source': # the path to the source file\n 'dest': # the path to the cache file for the post/page\n 'post': # the Post object for the post/page\n}\n\n\n\nOne example is the deploy_hooks plugin.\n\n\nConfigPlugin Plugins\nDoes nothing specific, can be used to modify the site object (and thus the config).\nPut all the magic you want in set_site(), and don\u2019t forget to run the one\nfrom super(). Example  plugin: navstories\n\n\nPostScanner Plugins\nGet posts and pages from \"somewhere\" to be added to the timeline.\nThe only currently existing plugin of this kind reads them from disk.\n\n\n\nPlugin Index\nThere is a plugin index, which stores all\nof the plugins for Nikola people wanted to share with the world.\nYou may want to read the README for the Index if you want to\npublish your package there.\n\n\nPath/Link Resolution Mechanism\nAny plugin can register a function using Nikola.register_path_handler to\nallow resolution of paths and links. These are useful for templates, which\ncan access them via _link.\nFor example, you can always get a link to the path for the feed of the \"foo\" tag\nby using _link('tag_rss', 'foo') or the link://tag_rss/foo URL.\nHere's the relevant code from the tag plugin.\n# In set_site\nsite.register_path_handler('tag_rss', self.tag_rss_path)\n\n# And these always take name and lang as arguments and returl a list of\n# path elements.\ndef tag_rss_path(self, name, lang):\n    return [_f for _f in [self.site.config['TRANSLATIONS'][lang],\n                          self.site.config['TAG_PATH'], self.slugify_name(name, lang) + \".xml\"] if\n            _f]\n\n\nTemplate Hooks\nPlugins can use a hook system for adding stuff into templates.  In order to use\nit, a plugin must register itself.  The following hooks currently exist:\n\nextra_head (not equal to the config option!)\nbody_end (not equal to the config option!)\npage_header\nmenu\nmenu_alt (right-side menu in bootstrap, after menu in base)\npage_footer\n\nFor example, in order to register a script into extra_head:\n# In set_site\nsite.template_hooks['extra_head'].append('<script src=\"/assets/js/fancyplugin.js\">')\nThere is also another API available.  It allows use of dynamically generated\nHTML:\n# In set_site\ndef generate_html_bit(name, ftype='js'):\n    return '<script src=\"/assets/{t}/{n}.{t}\">'.format(n=name, t=ftype)\n\nsite.template_hooks['extra_head'].append(generate_html_bit, False, 'fancyplugin', type='js')\nThe second argument to append() is used to determine whether the function\nneeds access to the current template context and the site.  If it is set to\nTrue, the function will also receive site and context keyword\narguments.  Example use:\n# In set_site\ndef greeting(addr, endswith='', site=None, context=None):\n    if context['lang'] == 'en':\n        greet = u'Hello'\n    elif context['lang'] == 'es':\n        greet = u'\u00a1Hola'\n\n    t = u' BLOG_TITLE = {0}'.format(site.config['BLOG_TITLE'](context['lang']))\n\n    return u'<h3>{greet} {addr}{endswith}</h3>'.format(greet=greet, addr=addr,\n    endswith=endswith) + t\n\nsite.template_hooks['page_header'].append(greeting, True, u'Nikola Tesla', endswith=u'!')\n\n\nShortcodes\nSome (hopefully all) markup compilers support shortcodes in these forms:\n\n{{% foo %}}  # No arguments\n{{% foo bar %}}  # One argument, containing \"bar\"\n{{% foo bar baz=bat %}}  # Two arguments, one containing \"bar\", one called \"baz\" containing \"bat\"\n\n{{% foo %}}Some text{{% /foo %}}  # one argument called \"data\" containing \"Some text\"\n\nSo, if you are creating a plugin that generates markup, it may be a good idea\nto register it as a shortcode in addition of to restructured text directive or\nmarkdown extension, thus making it available to all markup formats.\nTo implement your own shortcodes from a plugin, you can create a plugin inheriting ShortcodePlugin and\nfrom its set_site method,  call\nNikola.register_shortcode(name, func) with the following arguments:\n\nname:\nName of the shortcode (\"foo\" in the examples above)\nfunc:\nA function that will handle the shortcode\n\nThe shortcode handler must return a two-element tuple, (output, dependencies)\n\noutput:\nThe text that will replace the shortcode in the document.\ndependencies:\nA list of all the files on disk which will make the output be considered\nout of date. For example, if the shortcode uses a template, it should be\nthe path to the template file.\n\nThe shortcode handler must accept the following named arguments (or\nvariable keyword arguments):\n\nsite:\nAn instance of the Nikola class, to access site state\ndata:\nIf the shortcut is used as opening/closing tags, it will be the text\nbetween them, otherwise None.\nlang:\nThe current language.\n\nIf the shortcode tag has arguments of the form foo=bar they will be\npassed as named arguments. Everything else will be passed as positional\narguments in the function call.\nSo, for example:\n\n{{% foo bar baz=bat beep %}}Some text{{% /foo %}}\n\nAssuming you registered foo_handler as the handler function for the\nshortcode named foo, this will result in the following call when the above\nshortcode is encountered:\n\nfoo_handler(\"bar\", \"beep\", baz=\"bat\", data=\"Some text\", site=whatever)\n\n\nTemplate-based Shortcodes\nAnother way to define a new shortcode is to add a template file to the\nshortcodes directory of your site. The template file must have the\nshortcode name as the basename and the extension .tmpl. For example, if you\nwant to add a new shortcode named foo, create the template file as\nshortcodes/foo.tmpl.\nWhen the shortcode is encountered, the matching template will be rendered with\nits context provided by the arguments given in the shortcode. Keyword arguments\nare passed directly, i.e. the key becomes the variable name in the template\nnamespace with a matching string value. Non-keyword arguments are passed as\nstring values in a tuple named _args. As for normal shortcodes with a\nhandler function, site and data will be added to the keyword arguments.\nExample:\nThe following shortcode:\n{{% foo bar=\"baz\" spam %}}\nWith a template in shortcodes/foo.tmpl with this content (using Jinja2\nsyntax in this example)\n<div class=\"{{ _args[0] if _args else 'ham' }}\">{{ bar }}</div>\nWill result in this output\n<div class=\"spam\">baz</div>\n\n\n\nState and Cache\nSometimes your plugins will need to cache things to speed up further actions. Here are the conventions for that:\n\nIf it's a file, put it somewhere in self.site.config['CACHE_FOLDER'] (defaults to cache/.\nIf it's a value, use self.site.cache.set(key, value) to set it and self.site.cache.get(key) to get it.\nThe key should be a string, the value should be json-encodable (so, be careful with datetime objects)\n\nThe values and files you store there can and will be deleted sometimes by the user. They should always be\nthings you can reconstruct without lossage. They are throwaways.\nOn the other hand, sometimes you want to save something that is not a throwaway. These are things that may\nchange the output, so the user should not delete them. We call that state. To save state:\n\nIf it's a file, put it somewhere in the working directory. Try not to do that please.\nIf it's a value, use self.site.state.set(key, value) to set it and self.state.cache.get(key) to get it.\nThe key should be a string, the value should be json-encodable (so, be careful with datetime objects)\n\nThe cache and state objects are rather simplistic, and that's intentional. They have no default values: if\nthe key is not there, you will get None and like it. They are meant to be both threadsafe, but hey, who can\nguarantee that sort of thing?\nThere are no sections, and no access protection, so let's not use it to store passwords and such. Use responsibly.",
      "title": "Extending Nikola",
      "url": "https://example.com/pages/extending/"
    }
  ]
}