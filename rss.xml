<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Aubrey Moore</title><link>https://aubreymoore.github.io/blog/</link><description>All things techie.</description><atom:link rel="self" type="application/rss+xml" href="https://aubreymoore.github.io/blog/rss.xml"></atom:link><language>en</language><lastBuildDate>Sun, 28 May 2017 07:13:26 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Converting a web2py web site to a static web site</title><link>https://aubreymoore.github.io/blog/posts/web2py-to-static/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;p&gt;I am building a web site using the web2py framework.  The site uses data stored
in MySQL database to build an index page of crops. For each crop, there is a
link to a page which is built to display all pests attacking the crop.&lt;/p&gt;
&lt;p&gt;I would like to host
a copy of this as a static site in GitHub pages.  Creating the static site was
surprisingly easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the web2py site in a local test browser.&lt;/li&gt;
&lt;li&gt;In an empty folder, use &lt;strong&gt;wget&lt;/strong&gt; to save local a local copy of every page generated by the site:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;wget --recursive --no-clobber --page-requisites \
 --adjust-extension --convert-links \
 --restrict-file-names=windows \
 --no-parent \
  http://127.0.0.1:8000/pestlist/default/crop_index
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;On the &lt;strong&gt;crop_index.html&lt;/strong&gt; page, change links to the &lt;strong&gt;pest_index.html&lt;/strong&gt; pages. Easily done using &lt;strong&gt;relace all&lt;/strong&gt; in &lt;strong&gt;atom&lt;/strong&gt; or some other
editor.&lt;/li&gt;
&lt;li&gt;Upload all files to a GitHub repo and enable GitHub pages for the repo.&lt;/li&gt;
&lt;li&gt;Create an index.html page in the top level folder of the repo which links to &lt;strong&gt;crop_index.html&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>github</category><category>python</category><category>web2py</category><guid>https://aubreymoore.github.io/blog/posts/web2py-to-static/</guid><pubDate>Sat, 27 May 2017 23:33:46 GMT</pubDate></item><item><title>Calculate geographical coordinates for equidistant points at vertices of a triangular grid</title><link>https://aubreymoore.github.io/blog/posts/calculate-geographical-coordinates-for-equidistant-points-at-vertices-of-a-triangular-grid/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;p&gt;I needed to set up a grid of equally spaced insect pheromone traps. While it is
convenient to put traps at the vertices of a rectangular grid, this is not
optimal because nearest neighbors on the diagonals are further away than those
within rows or columns (If the spacing within rows and columns is X, then the
diagonal spacing is sqrt(0.75)*X).  For equidistant spacing, points are placed
at vertices of a grid made with equilateral triangles. This python script
returns such a grid of points and returns the data as a KML file containing
latitude/longitude coordinates in decimal degrees.&lt;/p&gt;
&lt;script src="https://gist.github.com/aubreymoore/7f3688e88556e08a8069623ecf48b68f.js"&gt;&lt;/script&gt;

&lt;p&gt;The KML file may be displayed using Google Earth.&lt;/p&gt;
&lt;p&gt;&lt;img alt="example output" src="https://aubreymoore.github.io/blog/images/points.jpg"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>GIS GPS KML</category><guid>https://aubreymoore.github.io/blog/posts/calculate-geographical-coordinates-for-equidistant-points-at-vertices-of-a-triangular-grid/</guid><pubDate>Sat, 27 May 2017 23:33:46 GMT</pubDate></item><item><title>Using Scrapy to Extract Scientific Names from PestNet Fact Sheets</title><link>https://aubreymoore.github.io/blog/posts/using-scrapy-to-extract-scientific-names-from-pestnet-fact-sheets/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;p&gt;PestNet serves a couple of hundred excellent pest fact sheets on its site at http://www.pestnet.org/fact_sheets/index.htm. Unfortunately, these are indexed only by vernacular names. I want to hyperlink to sheets using scientific names.  So I wrote a  &lt;a href="https://scrapy.org/"&gt;scrapy&lt;/a&gt; script to crawl the site and scrape the section from each page which contains scientific names.  &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.spiders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CrawlSpider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rule&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.contrib.linkextractors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LinkExtractor&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;someSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CrawlSpider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'crawltest'&lt;/span&gt;
    &lt;span class="n"&gt;allowed_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'www.pestnet.org'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'http://www.pestnet.org/fact_sheets/index.htm'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinkExtractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;follow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'parse_item'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="c1"&gt;# Let's capture scientific names&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'scientific_names_log.md'&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;searchObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;r'&amp;lt;a name="Scientific Name"(.*?)&amp;lt;a name='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;searchObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Nothing found!!"&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{} {}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The script was invoked from the terminal using:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;scrapy runspider scrapePP.py -s &lt;span class="nv"&gt;DEPTH_LIMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;


&lt;p&gt;Here are the first few lines from &lt;strong&gt;scientific_names_log.md&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;http://www.pestnet.org/fact_sheets/mini/index.htm Nothing found!!
http://www.pestnet.org/fact_sheets/batiki_blue_grass_eye_spot_207.htm &amp;gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"False"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Scientific Name&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&amp;lt;P&amp;gt;&amp;lt;EM&amp;gt;&lt;/span&gt;Curvularia ischaemi&lt;span class="nt"&gt;&amp;lt;/EM&amp;gt;&amp;lt;/P&amp;gt;&lt;/span&gt;
http://www.pestnet.org/fact_sheets/bean_pod_borer_037.htm &amp;gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"False"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Scientific Name&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&amp;lt;P&amp;gt;&amp;lt;EM&amp;gt;&lt;/span&gt;Maruca&lt;span class="nt"&gt;&amp;lt;/EM&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;EM&amp;gt;&lt;/span&gt;vitrata&lt;span class="nt"&gt;&amp;lt;/EM&amp;gt;&lt;/span&gt;; it used to be known as &lt;span class="nt"&gt;&amp;lt;EM&amp;gt;&lt;/span&gt;Maruca testulalis.&lt;span class="nt"&gt;&amp;lt;/EM&amp;gt;&amp;lt;/P&amp;gt;&lt;/span&gt;
http://www.pestnet.org/fact_sheets/bean_lace_bug_253.htm &amp;gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"False"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Scientific Name&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&amp;lt;P&amp;gt;&amp;lt;EM&amp;gt;&amp;lt;/EM&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;EM&amp;gt;&lt;/span&gt;Corythucha gossypii&lt;span class="nt"&gt;&amp;lt;/EM&amp;gt;&amp;lt;/P&amp;gt;&lt;/span&gt;
http://www.pestnet.org/fact_sheets/bean_phaseolus_rust_217.htm &amp;gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"False"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Scientific Name&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&amp;lt;P&amp;gt;&amp;lt;EM&amp;gt;&lt;/span&gt;Uromyces appendiculatus&lt;span class="nt"&gt;&amp;lt;/EM&amp;gt;&lt;/span&gt; \r\nvar. &lt;span class="nt"&gt;&amp;lt;EM&amp;gt;&lt;/span&gt;appendiculatus.&lt;span class="nt"&gt;&amp;lt;/EM&amp;gt;&lt;/span&gt; Previously &lt;span class="nt"&gt;&amp;lt;EM&amp;gt;&lt;/span&gt;Uromyces \r\nphaseoli.&lt;span class="nt"&gt;&amp;lt;/EM&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/P&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;As you can see, there was still some work to be done to clean this up. I used the &lt;a href="https://atom.io/"&gt;atom&lt;/a&gt;  editor to delete the extraneous bits and saved urls and scientific names to 
&lt;a href="https://aubreymoore.github.io/blog/pacific_pests_insects.csv"&gt;pacific_pests_insects.csv&lt;/a&gt;. Note that this file contains info only on arthropod pests.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>scrapy</category><guid>https://aubreymoore.github.io/blog/posts/using-scrapy-to-extract-scientific-names-from-pestnet-fact-sheets/</guid><pubDate>Thu, 18 May 2017 03:00:26 GMT</pubDate></item><item><title>Finding Lost Parents</title><link>https://aubreymoore.github.io/blog/posts/finding-lost-parents/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Finding-Missing-Parents-in-a-Child-Parent-Self-Referencing-Table"&gt;Finding Missing Parents in a Child-Parent Self-Referencing Table&lt;a class="anchor-link" href="https://aubreymoore.github.io/blog/posts/finding-lost-parents/#Finding-Missing-Parents-in-a-Child-Parent-Self-Referencing-Table"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymysql&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Pattern:-Find-items-in-one-list-which-does-not-occur-in-a-second-list"&gt;Pattern: Find items in one list which does not occur in a second list&lt;a class="anchor-link" href="https://aubreymoore.github.io/blog/posts/finding-lost-parents/#Pattern:-Find-items-in-one-list-which-does-not-occur-in-a-second-list"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# To find parent_tids which do not have corresponding tids,&lt;/span&gt;
&lt;span class="c1"&gt;# convert lists to sets and calculate the difference.&lt;/span&gt;

&lt;span class="n"&gt;tid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;parent_tid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"m"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_tid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[2]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['m', 'f']&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Repeat-using-data-from-database"&gt;Repeat using data from database&lt;a class="anchor-link" href="https://aubreymoore.github.io/blog/posts/finding-lost-parents/#Repeat-using-data-from-database"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Database password: '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Database password: ········
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'mysql+pymysql://aubreymoore:{}@localhost/pestlist'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"select tid, parent_tid from taxon2;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tid_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;parent_tid_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tid_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parent_tid_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_tid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tid_list&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['6',
 '7707728',
 '196',
 '1169',
 '7683',
 '2766430',
 '2766636',
 '220',
 '407',
 '6688']&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parent_tid_list&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[8]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['#',
 '6',
 '7707728',
 '196',
 '1169',
 '7683',
 '2766430',
 '7707728',
 '220',
 '407']&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;missing_parents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_tid_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tid_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;missing_parents&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;&lt;div class="prompt output_prompt"&gt;Out[9]:&lt;/div&gt;


&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['2002379', '#', '1890281']&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Results"&gt;Results&lt;a class="anchor-link" href="https://aubreymoore.github.io/blog/posts/finding-lost-parents/#Results"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There are two missing parent_tids. Note that '#' is the parent of root nodes, so this is OK.&lt;/p&gt;
&lt;p&gt;A constraint needs to be added to the &lt;strong&gt;taxon2&lt;/strong&gt; table to prevent entry of a &lt;strong&gt;parent_tid&lt;/strong&gt; which does not match an existing &lt;strong&gt;tid&lt;/strong&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython2"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><guid>https://aubreymoore.github.io/blog/posts/finding-lost-parents/</guid><pubDate>Mon, 01 May 2017 03:01:11 GMT</pubDate></item><item><title>Using the Species API to Mine the GBIF Backbone Taxonomy</title><link>https://aubreymoore.github.io/blog/posts/using-the-species-api-to-mine-the-gbif-backbone-taxonomy/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;h3&gt;Here's how to get tons of info from GBIF.&lt;/h3&gt;
&lt;p&gt;Check out the &lt;a href="http://www.gbif.org/developer/species"&gt;Species API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First step is to locate the taxon in the GBIF Backbone Taxonomy. The GBIF Backbone Taxonomy, often called the Nub taxonomy, is a single synthetic management classification with the goal of covering all names GBIF is dealing with.&lt;/p&gt;
&lt;p&gt;You can search GBIF manually by going to &lt;a href="http://www.gbif.org/species"&gt;http://www.gbif.org/species&lt;/a&gt; and entering a scientific name or common name. The magic number you are looking for is the &lt;strong&gt;GBIF ID&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, you can use the Species API: &lt;a href="http://api.gbif.org/v1/species/search?q=lawn%20armyworm&amp;amp;rank=SPECIES"&gt;http://api.gbif.org/v1/species/search?q=lawn%20armyworm&amp;amp;rank=SPECIES&lt;/a&gt;. This will return info encoded as JSON. The magic number in this case is &lt;strong&gt;nubKey&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once we have the GBIF ID, which is 5109848 for &lt;em&gt;Spodoptera mauritia&lt;/em&gt;, we can harvest more data:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name usage:&lt;/td&gt;
&lt;td&gt;&lt;a href="http://api.gbif.org/v1/species/5109848"&gt;http://api.gbif.org/v1/species/5109848&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Synonyms:&lt;/td&gt;
&lt;td&gt;&lt;a href="http://api.gbif.org/v1/species/5109848/synonyms"&gt;http://api.gbif.org/v1/species/5109848/synonyms&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vernacular names:&lt;/td&gt;
&lt;td&gt;&lt;a href="http://api.gbif.org/v1/species/5109848/vernacularNames"&gt;http://api.gbif.org/v1/species/5109848/vernacularNames&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Media:&lt;/td&gt;
&lt;td&gt;&lt;a href="http://api.gbif.org/v1/species/5109848/media"&gt;http://api.gbif.org/v1/species/5109848/media&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;References:&lt;/td&gt;
&lt;td&gt;&lt;a href="http://api.gbif/v1/species/5109848/references"&gt;http://api.gbif/v1/species/5109848/references&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Distributions:&lt;/td&gt;
&lt;td&gt;&lt;a href="http://api.gbif.org/v1/species/5109848/distributions"&gt;http://api.gbif.org/v1/species/5109848/distributions&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Descriptions:&lt;/td&gt;
&lt;td&gt;&lt;a href="http://api.gbif.org/v1/species/5109848/descriptions"&gt;http://api.gbif.org/v1/species/5109848/descriptions&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><category>biodiversity</category><category>GBIF</category><category>JSON</category><category>taxonomy</category><guid>https://aubreymoore.github.io/blog/posts/using-the-species-api-to-mine-the-gbif-backbone-taxonomy/</guid><pubDate>Sat, 22 Apr 2017 00:34:00 GMT</pubDate></item><item><title>Setting Up an Online Weather Station</title><link>https://aubreymoore.github.io/blog/posts/setting-up-an-online-weather-station/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;p&gt;Was asked to set up an on-line weather station for the University of Guam's Agricutural Experiment Station at Yigo, Guam. The weather station is a &lt;a href="http://www.davisnet.com/solution/vantage-pro2/"&gt;Davis Vantage Pro 2 Plus&lt;/a&gt; on a mast mounted on the roof of a 40 foot shipping container. The container is equipped with internet access via a cable modem. Data is fetched from the weather instruments using a Davis Vantage Pro 2 console fitted with an optional data logger.&lt;/p&gt;
&lt;p&gt;Decided to use a &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b/"&gt;Raspberry Pi 3&lt;/a&gt; to read data from the weather station console via USB. Data is stored using &lt;a href="http://www.weewx.com/"&gt;weewx&lt;/a&gt; software, which also takes care of sending it to Weather Underground. The RP is connected to the modem by a cable.&lt;/p&gt;
&lt;h3&gt;Step 1: Install weewx on RPi&lt;/h3&gt;
&lt;h3&gt;Step 2: Remove the Fake Clock on the RPi&lt;/h3&gt;
&lt;p&gt;Following the suggestion in
&lt;a href="https://github.com/weewx/weewx/wiki/Raspberry-Pi"&gt;https://github.com/weewx/weewx/wiki/Raspberry-Pi&lt;/a&gt;,
I deleted the fake hardware clock from the RPi:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get purge fake-hwclock
&lt;/pre&gt;


&lt;p&gt;This forces &lt;strong&gt;weewx&lt;/strong&gt; to wait until a software clock is set from the internet connection before resuming after a power outage.&lt;/p&gt;
&lt;h3&gt;Step 3: Create a Weather Underground Personal Weather Station and Configure weewx to Feed It&lt;/h3&gt;
&lt;p&gt;Followed these directions:
&lt;a href="https://publiclab.org/notes/amysoyka/06-20-2014/how-to-set-up-your-weather-station-and-stream-it-to-the-internet"&gt;https://publiclab.org/notes/amysoyka/06-20-2014/how-to-set-up-your-weather-station-and-stream-it-to-the-internet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WU assigned &lt;strong&gt;KYIGO4&lt;/strong&gt; as the weather station ID.&lt;/p&gt;
&lt;h3&gt;Step 4: Access Weather Station Online&lt;/h3&gt;
&lt;p&gt;The weather station is online at:
&lt;a href="https://www.wunderground.com/personal-weather-station/dashboard?ID=KYIGO4"&gt;https://www.wunderground.com/personal-weather-station/dashboard?ID=KYIGO4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This page automatically updates every few seconds.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=KYIGO4"&gt;&lt;img src="http://banners.wunderground.com/cgi-bin/banner/ban/wxBanner?bannertype=pws250&amp;amp;weatherstationcount=KYIGO4" width="250" height="150" border="0" alt="Weather Underground PWS KYIGO4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;All outdoor sensors were replaced on April 21, 2017 because the temperature/humidity senor was not working.&lt;/p&gt;&lt;/div&gt;</description><category>Raspberry Pi</category><guid>https://aubreymoore.github.io/blog/posts/setting-up-an-online-weather-station/</guid><pubDate>Sat, 08 Apr 2017 16:43:59 GMT</pubDate></item><item><title>Install web2py in a Conda Virtual Environment</title><link>https://aubreymoore.github.io/blog/posts/play-pen/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;p&gt;Here's how to get &lt;strong&gt;web2py&lt;/strong&gt; installed in a virtual environment using &lt;strong&gt;conda&lt;/strong&gt; instead of &lt;strong&gt;virtualenv&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Info on &lt;strong&gt;conda environments&lt;/strong&gt; is available here: 
https://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/20/conda/&lt;/p&gt;
&lt;h3&gt;Step 1. Create a directory for our web2py project.&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; Devel
mkdir playpen
&lt;span class="nb"&gt;cd&lt;/span&gt; playpen
&lt;/pre&gt;


&lt;h3&gt;Step 2. Create a virtual environment and activate it.&lt;/h3&gt;
&lt;p&gt;Note that &lt;strong&gt;web2py&lt;/strong&gt; runs under python 2, not python 3.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;conda create -n playpen &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2.7
&lt;span class="nb"&gt;source&lt;/span&gt; activate playpen
&lt;/pre&gt;


&lt;h3&gt;Step 3. Download and install web2py.&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;wget https://mdipierro.pythonanywhere.com/examples/static/web2py_src.zip
unzip web2py_src.zip
rm web2py_src.zip
&lt;/pre&gt;


&lt;h3&gt;Step 3. Install pygraphwiz (used to visualize models).&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;pip install pygraphviz
&lt;/pre&gt;


&lt;h3&gt;Step 4 -- Open web2py in a browser&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;playpen&lt;span class="o"&gt;)&lt;/span&gt; aubreymoore@aubreymoore-Aspire-7750Z:~/Devel/playpen/web2py$ python web2py.py
&lt;/pre&gt;


&lt;h3&gt;Step 5 -- Open web2py in a python shell&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;(playpen) aubreymoore@aubreymoore-Aspire-7750Z:~/Devel/playpen/web2py$ python web2py.py -S pestlist/default -M
&lt;/pre&gt;


&lt;h3&gt;Step 6. At the end of a session, the virtual environment can be deactivated.&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; deactivate playpen
&lt;/pre&gt;


&lt;h3&gt;Step 7. To undo everything:&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;conda remove -n playpen --all
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
rm -rf playpen
&lt;/pre&gt;&lt;/div&gt;</description><category>Anaconda</category><category>python</category><category>virtualenv</category><category>web2py</category><guid>https://aubreymoore.github.io/blog/posts/play-pen/</guid><pubDate>Tue, 21 Feb 2017 03:01:06 GMT</pubDate></item><item><title>Tweeking Nikola CSS to Improve Table Display</title><link>https://aubreymoore.github.io/blog/posts/tweeking-nikola-css-to-improve-table-display/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;p&gt;Crappy default styling of tables was fixed by adding this file:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~nik/mysite/files/assets/css/custom.css&lt;/strong&gt; **&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/* Tweeks by Aubrey Moore */&lt;/span&gt;

&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;text-align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f2f2f2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>css</category><category>Nikola</category><guid>https://aubreymoore.github.io/blog/posts/tweeking-nikola-css-to-improve-table-display/</guid><pubDate>Mon, 20 Feb 2017 09:28:56 GMT</pubDate></item><item><title>USDA Farm Bill Funding for Coconut Rhinoceros Beetle Projects in Guam and Hawaii</title><link>https://aubreymoore.github.io/blog/posts/usda-farm-bill-funding-for-coconut-rhinoceros-beetle-projects-in-guam-and-hawaii/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Fiscal year&lt;sup&gt;*&lt;/sup&gt;&lt;/th&gt;
&lt;th align="right"&gt;Guam&lt;/th&gt;
&lt;th align="right"&gt;Hawaii&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.aphis.usda.gov/newsroom/2014/04/pdf/fy14_farm_bill_spending_plan.pdf"&gt;2014&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;$180,000&lt;/td&gt;
&lt;td align="right"&gt;$2,448,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.aphis.usda.gov/plant_health/farmbill-section10007/fy15/FY15-FarmBill10007-PlantPlestandDisease-Spending-Plan.pdf"&gt;2015&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;$179,844&lt;/td&gt;
&lt;td align="right"&gt;$2,200,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.aphis.usda.gov/plant_health/farmbill-section10007/fy16/Plant-Pest-Disease-FB-Spending-Plan-FY16.pdf"&gt;2016&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;$250,000&lt;/td&gt;
&lt;td align="right"&gt;$1,399,384&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.aphis.usda.gov/plant_health/farmbill-section10007/fy17/FY2017-PPDMDPP-Spending-Plan.pdf"&gt;2017&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;$475,000&lt;/td&gt;
&lt;td align="right"&gt;$1,225,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;$1,084,844&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;$7,272,384&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt;Click on fiscal year for details.&lt;/p&gt;&lt;/div&gt;</description><guid>https://aubreymoore.github.io/blog/posts/usda-farm-bill-funding-for-coconut-rhinoceros-beetle-projects-in-guam-and-hawaii/</guid><pubDate>Mon, 20 Feb 2017 07:08:40 GMT</pubDate></item><item><title>Using Scrapy to Find a String in a Web Site</title><link>https://aubreymoore.github.io/blog/posts/using-scrapy-to-find-a-string-in-a-web-site/</link><dc:creator>Aubrey Moore</dc:creator><description>&lt;div&gt;&lt;p&gt;Last updated Sunday, 12. February 2017 07:53AM &lt;/p&gt;
&lt;p&gt;I wanted to find pages on the University of Guam College of Natural and Life Sciences Web Site containing a specific string. This short python script, which uses the &lt;a href="https://scrapy.org/"&gt;scrapy&lt;/a&gt; framework, does the trick:&lt;/p&gt;
&lt;h4&gt;test_spider.py&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.spiders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CrawlSpider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rule&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.contrib.linkextractors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LinkExtractor&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;someSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CrawlSpider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'crawltest'&lt;/span&gt;
  &lt;span class="n"&gt;allowed_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'cnas-re.uog.edu'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'http://cnas-re.uog.edu'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinkExtractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;follow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'parse_item'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'bell pepper'&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'test_spider_log.md'&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'**{} was found in &amp;lt;{}&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Executed from the command line using:&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;scrapy runspider test_spider.py -s &lt;span class="nv"&gt;DEPTH_LIMIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/pre&gt;


&lt;h4&gt;Output: test_spider_log.md&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;bell pepper&lt;/strong&gt; was found in &lt;a href="http://cnas-re.uog.edu/soils-of-guam/"&gt;http://cnas-re.uog.edu/soils-of-guam/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bell pepper&lt;/strong&gt; was found in &lt;a href="http://cnas-re.uog.edu/cnas-publications/?auth=&amp;amp;limit=17&amp;amp;tgid=&amp;amp;type=&amp;amp;usr=&amp;amp;yr="&gt;http://cnas-re.uog.edu/cnas-publications/?auth=&amp;amp;limit=17&amp;amp;tgid=&amp;amp;type=&amp;amp;usr=&amp;amp;yr=&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bell pepper&lt;/strong&gt; was found in &lt;a href="http://cnas-re.uog.edu/cnas-publications/?auth=&amp;amp;tgid=115&amp;amp;type=&amp;amp;usr=&amp;amp;yr="&gt;http://cnas-re.uog.edu/cnas-publications/?auth=&amp;amp;tgid=115&amp;amp;type=&amp;amp;usr=&amp;amp;yr=&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bell pepper&lt;/strong&gt; was found in &lt;a href="http://cnas-re.uog.edu/cnas-publications/?auth=&amp;amp;tgid=66&amp;amp;type=&amp;amp;usr=&amp;amp;yr="&gt;http://cnas-re.uog.edu/cnas-publications/?auth=&amp;amp;tgid=66&amp;amp;type=&amp;amp;usr=&amp;amp;yr=&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;&lt;/div&gt;</description><category>python scrapy</category><guid>https://aubreymoore.github.io/blog/posts/using-scrapy-to-find-a-string-in-a-web-site/</guid><pubDate>Sat, 11 Feb 2017 09:57:33 GMT</pubDate></item></channel></rss>